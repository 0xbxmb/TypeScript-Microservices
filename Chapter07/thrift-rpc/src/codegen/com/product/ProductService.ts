/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v1.1.7
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import { Popularity as PopularityService$Popularity } from "./../popularity/PopularityService";
export interface IProductArgs {
    id: number;
    feedback: PopularityService$Popularity;
    productInfo: string;
    productType: string;
}
export class Product implements thrift.StructLike {
    public id: number;
    public feedback: PopularityService$Popularity;
    public productInfo: string;
    public productType: string;
    constructor(args: IProductArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field id is unset!");
        }
        if (args != null && args.feedback != null) {
            this.feedback = args.feedback;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field feedback is unset!");
        }
        if (args != null && args.productInfo != null) {
            this.productInfo = args.productInfo;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field productInfo is unset!");
        }
        if (args != null && args.productType != null) {
            this.productType = args.productType;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field productType is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Product");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.I32, 1);
            output.writeI32(this.id);
            output.writeFieldEnd();
        }
        if (this.feedback != null) {
            output.writeFieldBegin("feedback", thrift.TType.STRUCT, 2);
            this.feedback.write(output);
            output.writeFieldEnd();
        }
        if (this.productInfo != null) {
            output.writeFieldBegin("productInfo", thrift.TType.STRING, 3);
            output.writeString(this.productInfo);
            output.writeFieldEnd();
        }
        if (this.productType != null) {
            output.writeFieldBegin("productType", thrift.TType.STRING, 4);
            output.writeString(this.productType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Product {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: PopularityService$Popularity = PopularityService$Popularity.read(input);
                        _args.feedback = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.productInfo = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.productType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.feedback !== undefined && _args.productInfo !== undefined && _args.productType !== undefined) {
            return new Product(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Product from input");
        }
    }
}
export interface IProductServiceExceptionArgs {
    message: string;
}
export class ProductServiceException implements thrift.StructLike {
    public message: string;
    constructor(args: IProductServiceExceptionArgs) {
        if (args != null && args.message != null) {
            this.message = args.message;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field message is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ProductServiceException");
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.TType.STRING, 1);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ProductServiceException {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.message = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.message !== undefined) {
            return new ProductServiceException(_args);
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ProductServiceException from input");
        }
    }
}
export namespace ProductService {
    export interface IGetProductArgsArgs {
        productId: number;
    }
    export class GetProductArgs implements thrift.StructLike {
        public productId: number;
        constructor(args: IGetProductArgsArgs) {
            if (args != null && args.productId != null) {
                this.productId = args.productId;
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field productId is unset!");
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetProductArgs");
            if (this.productId != null) {
                output.writeFieldBegin("productId", thrift.TType.I32, 1);
                output.writeI32(this.productId);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): GetProductArgs {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 1:
                        if (fieldType === thrift.TType.I32) {
                            const value_6: number = input.readI32();
                            _args.productId = value_6;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            if (_args.productId !== undefined) {
                return new GetProductArgs(_args);
            }
            else {
                throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetProductArgs from input");
            }
        }
    }
    export interface IGetProductResultArgs {
        success?: Product;
        exp?: ProductServiceException;
    }
    export class GetProductResult implements thrift.StructLike {
        public success?: Product;
        public exp?: ProductServiceException;
        constructor(args?: IGetProductResultArgs) {
            if (args != null && args.success != null) {
                this.success = args.success;
            }
            if (args != null && args.exp != null) {
                this.exp = args.exp;
            }
        }
        public write(output: thrift.TProtocol): void {
            output.writeStructBegin("GetProductResult");
            if (this.success != null) {
                output.writeFieldBegin("success", thrift.TType.STRUCT, 0);
                this.success.write(output);
                output.writeFieldEnd();
            }
            if (this.exp != null) {
                output.writeFieldBegin("exp", thrift.TType.STRUCT, 1);
                this.exp.write(output);
                output.writeFieldEnd();
            }
            output.writeFieldStop();
            output.writeStructEnd();
            return;
        }
        public static read(input: thrift.TProtocol): GetProductResult {
            input.readStructBegin();
            let _args: any = {};
            while (true) {
                const ret: thrift.IThriftField = input.readFieldBegin();
                const fieldType: thrift.TType = ret.fieldType;
                const fieldId: number = ret.fieldId;
                if (fieldType === thrift.TType.STOP) {
                    break;
                }
                switch (fieldId) {
                    case 0:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_7: Product = Product.read(input);
                            _args.success = value_7;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    case 1:
                        if (fieldType === thrift.TType.STRUCT) {
                            const value_8: ProductServiceException = ProductServiceException.read(input);
                            _args.exp = value_8;
                        }
                        else {
                            input.skip(fieldType);
                        }
                        break;
                    default: {
                        input.skip(fieldType);
                    }
                }
                input.readFieldEnd();
            }
            input.readStructEnd();
            return new GetProductResult(_args);
        }
    }
    export class Client<Context = any> {
        protected _requestId: number;
        protected transport: thrift.ITransportConstructor;
        protected protocol: thrift.IProtocolConstructor;
        protected connection: thrift.IThriftConnection<Context>;
        constructor(connection: thrift.IThriftConnection<Context>) {
            this._requestId = 0;
            this.transport = connection.Transport;
            this.protocol = connection.Protocol;
            this.connection = connection;
        }
        public incrementRequestId(): number {
            return this._requestId += 1;
        }
        public getProduct(productId: number, context?: Context): Promise<Product> {
            const writer: thrift.TTransport = new this.transport();
            const output: thrift.TProtocol = new this.protocol(writer);
            output.writeMessageBegin("getProduct", thrift.MessageType.CALL, this.incrementRequestId());
            const args: GetProductArgs = new GetProductArgs({ productId });
            args.write(output);
            output.writeMessageEnd();
            return this.connection.send(writer.flush(), context).then((data: Buffer) => {
                const reader: thrift.TTransport = this.transport.receiver(data);
                const input: thrift.TProtocol = new this.protocol(reader);
                try {
                    const { fieldName: fieldName, messageType: messageType }: thrift.IThriftMessage = input.readMessageBegin();
                    if (fieldName === "getProduct") {
                        if (messageType === thrift.MessageType.EXCEPTION) {
                            const err: thrift.TApplicationException = thrift.TApplicationException.read(input);
                            input.readMessageEnd();
                            return Promise.reject(err);
                        }
                        const result: GetProductResult = GetProductResult.read(input);
                        input.readMessageEnd();
                        if (result.exp != null) {
                            return Promise.reject(result.exp);
                        }
                        if (result.success != null) {
                            return Promise.resolve(result.success);
                        }
                        else {
                            return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, "getProduct failed: unknown result"));
                        }
                    }
                    else {
                        return Promise.reject(new thrift.TApplicationException(thrift.TApplicationExceptionType.WRONG_METHOD_NAME, "Received a response to an unknown RPC function: " + fieldName));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            });
        }
    }
    export interface IHandler<Context = any> {
        getProduct(productId: number, context?: Context): Product | Promise<Product>;
    }
    export class Processor<Context = any> {
        public _handler: IHandler<Context>;
        constructor(handler: IHandler<Context>) {
            this._handler = handler;
        }
        public process(input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<Buffer>((resolve, reject): void => {
                const metadata: thrift.IThriftMessage = input.readMessageBegin();
                const fieldName: string = metadata.fieldName;
                const requestId: number = metadata.requestId;
                const methodName: string = "process_" + fieldName;
                switch (methodName) {
                    case "process_getProduct": {
                        resolve(this.process_getProduct(requestId, input, output, context));
                    }
                    default: {
                        input.skip(thrift.TType.STRUCT);
                        input.readMessageEnd();
                        const errMessage = "Unknown function " + fieldName;
                        const err = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                        output.writeMessageBegin(fieldName, thrift.MessageType.EXCEPTION, requestId);
                        err.write(output);
                        output.writeMessageEnd();
                        resolve(output.flush());
                    }
                }
            });
        }
        public process_getProduct(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): Promise<Buffer> {
            return new Promise<Product>((resolve, reject): void => {
                try {
                    const args: GetProductArgs = GetProductArgs.read(input);
                    input.readMessageEnd();
                    resolve(this._handler.getProduct(args.productId, context));
                }
                catch (err) {
                    reject(err);
                }
            }).then((data: Product): Buffer => {
                const result: GetProductResult = new GetProductResult({ success: data });
                output.writeMessageBegin("getProduct", thrift.MessageType.REPLY, requestId);
                result.write(output);
                output.writeMessageEnd();
                return output.flush();
            }).catch((err: Error): Buffer => {
                if (err instanceof ProductServiceException) {
                    const result: GetProductResult = new GetProductResult({ exp: err });
                    output.writeMessageBegin("getProduct", thrift.MessageType.REPLY, requestId);
                    result.write(output);
                    output.writeMessageEnd();
                    return output.flush();
                }
                else {
                    const result: thrift.TApplicationException = new thrift.TApplicationException(thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin("getProduct", thrift.MessageType.EXCEPTION, requestId);
                    result.write(output);
                    output.writeMessageEnd();
                    return output.flush();
                }
            });
        }
    }
}
